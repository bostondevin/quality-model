function noop() { }
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function text(data) {
    return document.createTextNode(data);
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
// TODO figure out if we still want to support
// shorthand events, or if we want to implement
// a real bubbling mechanism
function bubble(component, event) {
    const callbacks = component.$$.callbacks[event.type];
    if (callbacks) {
        callbacks.slice().forEach(fn => fn(event));
    }
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : options.context || []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

/* src/Star.svelte generated by Svelte v3.38.2 */

function add_css$1() {
	var style = element("style");
	style.id = "svelte-1rhz5xd-style";
	style.textContent = ".star.svelte-1rhz5xd{margin-right:4px}.starPath.svelte-1rhz5xd{fill:none;stroke:#999}.filled.svelte-1rhz5xd{fill:#ffcf00}";
	append(document.head, style);
}

function create_fragment$1(ctx) {
	let svg;
	let title_1;
	let t;
	let path;
	let mounted;
	let dispose;

	return {
		c() {
			svg = svg_element("svg");
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[0]);
			path = svg_element("path");
			attr(path, "data-starid", /*starId*/ ctx[2]);
			attr(path, "class", "starPath svelte-1rhz5xd");
			attr(path, "d", "m25,1 6,17h18l-14,11 5,17-15-10-15,10 5-17-14-11h18z");
			toggle_class(path, "filled", /*filled*/ ctx[1]);
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", "20");
			attr(svg, "height", "20");
			attr(svg, "viewBox", "0 0 51 48");
			attr(svg, "class", "star svelte-1rhz5xd");
			attr(svg, "data-starid", /*starId*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, title_1);
			append(title_1, t);
			append(svg, path);

			if (!mounted) {
				dispose = [
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[4]),
					listen(svg, "click", /*click_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data(t, /*title*/ ctx[0]);

			if (dirty & /*starId*/ 4) {
				attr(path, "data-starid", /*starId*/ ctx[2]);
			}

			if (dirty & /*filled*/ 2) {
				toggle_class(path, "filled", /*filled*/ ctx[1]);
			}

			if (dirty & /*starId*/ 4) {
				attr(svg, "data-starid", /*starId*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { title = "star" } = $$props;
	let { filled = false } = $$props;
	let { starId } = $$props;

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("filled" in $$props) $$invalidate(1, filled = $$props.filled);
		if ("starId" in $$props) $$invalidate(2, starId = $$props.starId);
	};

	return [title, filled, starId, mouseover_handler, mouseleave_handler, click_handler];
}

class Star extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1rhz5xd-style")) add_css$1();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { title: 0, filled: 1, starId: 2 });
	}
}

/* src/Rating.svelte generated by Svelte v3.38.2 */

function add_css() {
	var style = element("style");
	style.id = "svelte-dffvs7-style";
	style.textContent = ".feedback.svelte-dffvs7{position:relative}.starContainer.svelte-dffvs7{display:inline-block;border-radius:8px;padding:4px 6px 0}button{cursor:pointer}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (34:2) {#each stars as star}
function create_each_block(ctx) {
	let star;
	let current;

	star = new Star({
			props: {
				filled: /*hoverRating*/ ctx[1]
				? /*hoverRating*/ ctx[1] >= /*star*/ ctx[7]
				: /*rating*/ ctx[0] >= /*star*/ ctx[7],
				starId: /*star*/ ctx[7]
			}
		});

	star.$on("mouseover", /*handleHover*/ ctx[2](/*star*/ ctx[7]));
	star.$on("mouseleave", /*mouseleave_handler*/ ctx[6]);
	star.$on("click", /*handleRate*/ ctx[3](/*star*/ ctx[7]));

	return {
		c() {
			create_component(star.$$.fragment);
		},
		m(target, anchor) {
			mount_component(star, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const star_changes = {};

			if (dirty & /*hoverRating, rating*/ 3) star_changes.filled = /*hoverRating*/ ctx[1]
			? /*hoverRating*/ ctx[1] >= /*star*/ ctx[7]
			: /*rating*/ ctx[0] >= /*star*/ ctx[7];

			star.$set(star_changes);
		},
		i(local) {
			if (current) return;
			transition_in(star.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(star.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(star, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let span;
	let current;
	let each_value = /*stars*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");
			span = element("span");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(span, "class", "starContainer svelte-dffvs7");
			attr(div, "class", "feedback svelte-dffvs7");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(span, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*hoverRating, stars, rating, handleHover, handleRate*/ 31) {
				each_value = /*stars*/ ctx[4];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(span, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { rating = null } = $$props;
	let { num = 5 } = $$props;
	let hoverRating = null;

	const handleHover = id => () => {
		$$invalidate(1, hoverRating = id);
	};

	const handleRate = id => () => {
		$$invalidate(0, rating = id);
	};

	let stars = Array.from({ length: num }, (__, i) => i + 1);
	const mouseleave_handler = () => $$invalidate(1, hoverRating = null);

	$$self.$$set = $$props => {
		if ("rating" in $$props) $$invalidate(0, rating = $$props.rating);
		if ("num" in $$props) $$invalidate(5, num = $$props.num);
	};

	return [rating, hoverRating, handleHover, handleRate, stars, num, mouseleave_handler];
}

class Rating extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-dffvs7-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { rating: 0, num: 5 });
	}
}

export { Rating };
